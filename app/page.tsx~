"use client";

import { useEffect, useMemo, useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "primereact/button";
import { Card } from "primereact/card";
import { Dropdown } from "primereact/dropdown";
import { InputText } from "primereact/inputtext";
import { DataTable } from "primereact/datatable";
import { Column } from "primereact/column";
import { useRouter } from "next/navigation";
import { useRecentSearches } from "@/hooks/useRecentSearch";
import { InputMask } from "@react-input/mask";

import {
  searchTypeSchema,
  SearchType,
  getSearchSchema,
} from "@/schema/searchSchema";
import { z } from "zod";
import { useMask } from "@react-input/mask";
import styled from "styled-components";
import { Entity } from "@/mocks/data";
import EntityDetailsModal from "@/components/EntityDetailsModal";

const formSchema = z.object({
  type: searchTypeSchema,
  value: z.string(),
});

type FormValues = z.infer<typeof formSchema>;

const searchOptions = [
  { label: "CPF/CNPJ", value: "cpf/cnpj" },
  { label: "Email", value: "email" },
  { label: "Telefone", value: "telefone" },
  { label: "Endereço", value: "endereço" },
  { label: "Nome", value: "nome" },
];

const PageContainer = styled.div`
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem 1rem;
`;

const Title = styled.h1`
  font-size: 2rem;
  font-weight: bold;
  margin-bottom: 0.5rem;
`;

const Description = styled.p`
  color: #6b7280;
  margin-bottom: 2rem;
`;

const SearchCard = styled(Card)`
  margin-bottom: 2rem;
`;

const RecentSearchesCard = styled(Card)``;

export default function Home() {
  const router = useRouter();
  const { recentSearches, addSearch } = useRecentSearches();
  const [selectedEntity, setSelectedEntity] = useState<Entity | null>(null);

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
    setValue,
    setError,
  } = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      type: "cpf/cnpj",
      value: "",
    },
  });

  const searchType = watch("type");

  function getMaskForType(type: SearchType): string {
    switch (type) {
      case "cpf/cnpj":
        return "___.___.___-__ / __.___.___/____-__";
      case "telefone":
        return "(__) ____-____ / (__) _____-____";
      default:
        return "";
    }
  }

  function getReplacementForType(type: SearchType): Record<string, RegExp> {
    switch (type) {
      case "cpf/cnpj":
        return { _: /\d/ };
      case "telefone":
        return { _: /\d/ };
      default:
        return {};
    }
  }

  const getPlaceholder = () => {
    switch (searchType) {
      case "cpf/cnpj":
        return "Digite CPF ou CNPJ";
      case "email":
        return "Digite o email";
      case "telefone":
        return "Digite o telefone";
      case "endereço":
        return "Digite o endereço";
      case "nome":
        return "Digite nome ou razão social";
      default:
        return "";
    }
  };

  useEffect(() => {
    setValue("value", "");
  }, [searchType]);

  const mask = getMaskForType(searchType);
  const replacement = getReplacementForType(searchType);

  const inputRef = useMask({
    mask,
    replacement,
  });

  const onSubmit = (data: FormValues) => {
    const valueSchema = getSearchSchema(data.type);
    const validationResult = valueSchema.safeParse(data.value);
    if (!validationResult.success) {
      const firstErrorMessage =
        validationResult.error.issues[0].message || "Valor inválido";
      setError("value", {
        type: "manual",
        message: firstErrorMessage,
      });
      return;
    }

    addSearch({
      type: data.type,
      value: data.value,
      timestamp: new Date().toISOString(),
    });

    router.push(
      `/results?type=${data.type}&value=${encodeURIComponent(data.value)}`,
    );
  };

  return (
    <PageContainer>
      <div className={`text-center`}>
        <Title>Consulta de Dados Básicos</Title>
        <Description>
          Encontre as informações essenciais de seus investigados
        </Description>
      </div>

      <SearchCard title="Busca de entidades">
        <form onSubmit={handleSubmit(onSubmit)} className="">
          <div className="flex place-items-end justify-content-evenly gap-10 mb-4">
            <div>
              <label htmlFor="type" className="block font-medium mb-2">
                Tipo de busca
              </label>
              <Dropdown
                id="type"
                options={searchOptions}
                value={searchType}
                onChange={(e) => setValue("type", e.value)}
                placeholder="Selecione"
                className="max-w-[150px]"
                data-cy="search-type"
              />
            </div>
            <div className="relative md:col-span-2">
              <label htmlFor="value" className="block font-medium mb-2">
                {searchOptions.find((opt) => opt.value === searchType)?.label}
              </label>
              {searchType === "cpf/cnpj" && (
                <InputMask
                  key={searchType}
                  mask="___.___.___-__ / ____-__"
                  replacement={{ _: /\d/ }}
                  id="value"
                  placeholder={getPlaceholder()}
                  className={`w-full focus:border- ${errors.value ? "p-invalid" : ""}`}
                  ref={inputRef}
                  {...register("value")}
                  data-cy="search-input"
                />
              )}
              {searchType === "telefone" && (
                <InputMask
                  key={searchType}
                  mask="(__) ____-____"
                  replacement={{ _: /\d/ }}
                  id="value"
                  placeholder={getPlaceholder()}
                  className={`w-full ${errors.value ? "p-invalid" : ""}`}
                  ref={inputRef}
                  {...register("value")}
                  data-cy="search-input"
                />
              )}
              {searchType !== "cpf/cnpj" && searchType !== "telefone" && (
                <InputText
                  id="value"
                  placeholder={getPlaceholder()}
                  className={`w-full ${errors.value ? "p-invalid" : ""}`}
                  {...register("value")}
                  data-cy="search-input"
                />
              )}

              {errors.value && (
                <small
                  className="absolute -bottom-6 whitespace-nowrap left-0 p-error"
                  data-cy={"error-message"}
                >
                  {errors.value.message}
                </small>
              )}
            </div>
            <Button
              label="Pesquisar"
              type="submit"
              icon="pi pi-search"
              className="max-h-[50px]"
              data-cy="search-button"
            />
          </div>
        </form>
      </SearchCard>

      <RecentSearchesCard
        title="Entidades Visualizadas Recentemente"
        data-cy="recently-viewed-section"
      >
        <DataTable
          value={recentSearches.filter((search) => search.entity)}
          rows={10}
          paginator
        >
          <Column header="Nome" body={(row) => row.entity?.name || row.value} />
          <Column
            header="Documento"
            body={(row) => row.entity?.document || row.value}
          />
          <Column
            field="type"
            header="Tipo"
            body={(row) =>
              searchOptions.find((opt) => opt.value === row.type)?.label ||
              (row.entity?.type === "individual" ? "Pessoa" : "Empresa")
            }
          />
          <Column
            field="timestamp"
            header="Visualizado em"
            body={(row) => new Date(row.timestamp).toLocaleString()}
          />
          <Column
            body={(row) => (
              <Button
                label="Ver detalhes"
                icon="pi pi-eye"
                className="p-button-outlined p-button-sm"
                data-cy="view-details-button"
                onClick={() => {
                  if (row.entity) {
                    setSelectedEntity(row.entity);
                  }
                }}
              />
            )}
          />
        </DataTable>
      </RecentSearchesCard>

      <RecentSearchesCard title="Resultados pesquisados recentes">
        <DataTable value={recentSearches} rows={10} paginator>
          <Column field="value" header="Termo" />
          <Column
            field="type"
            header="Tipo"
            body={(row) =>
              searchOptions.find((opt) => opt.value === row.type)?.label ||
              row.type
            }
          />
          <Column
            field="timestamp"
            header="Data"
            body={(row) => new Date(row.timestamp).toLocaleString()}
          />
        </DataTable>
      </RecentSearchesCard>

      {selectedEntity && (
        <EntityDetailsModal
          entity={selectedEntity}
          onClose={() => setSelectedEntity(null)}
        />
      )}
    </PageContainer>
  );
}
