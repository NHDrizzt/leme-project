// app/page.tsx
"use client"; // Marque como componente de cliente para usar hooks

import { useQuery } from "@tanstack/react-query";
import { Button } from "primereact/button";
import { Card } from "primereact/card";
import styled from "styled-components";
import { ProgressSpinner } from "primereact/progressspinner";

interface Post {
  id: number;
  title: string;
  body: string;
  userId: number;
}

const fetchPosts = async (): Promise<Post[]> => {
  const response = await fetch("https://jsonplaceholder.typicode.com/posts");
  if (!response.ok) {
    throw new Error("Erro ao buscar dados");
  }
  return response.json();
};

const StyledCard = styled(Card)`
  background-color: #f8fafc !important;
  border: 1px solid #e2e8f0 !important;
  border-radius: 12px !important;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05) !important;
  transition:
    transform 0.2s,
    box-shadow 0.2s;

  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1) !important;
  }
`;

const PostListContainer = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 1.5rem;
  margin-top: 2rem;
`;

const PageContainer = styled.main`
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem 1rem;
`;

export default function Home() {
  const { data, isLoading, isError, error, refetch } = useQuery<Post[], Error>({
    queryKey: ["posts"],
    queryFn: fetchPosts,
    refetchOnWindowFocus: false,
  });

  return (
    <PageContainer>
      <div className="flex align-items-center justify-content-between mb-4">
        <h1 className="text-3xl font-bold">Posts da API</h1>
        <Button
          label="Recarregar Dados"
          icon="pi pi-refresh"
          onClick={() => refetch()}
          className="p-button-outlined"
        />
      </div>

      {isLoading && (
        <div className="flex justify-content-center py-8">
          <ProgressSpinner />
        </div>
      )}

      {isError && (
        <Card className="bg-red-50 border-red-200">
          <div className="text-red-700">
            <i className="pi pi-exclamation-triangle mr-2"></i>
            <strong>Erro:</strong> {error.message}
          </div>
          <Button
            label="Tentar novamente"
            className="mt-3 p-button-danger p-button-outlined"
            onClick={() => refetch()}
          />
        </Card>
      )}

      {data && (
        <PostListContainer>
          {data.slice(0, 6).map((post) => (
            <StyledCard key={post.id} title={post.title}>
              <p className="line-clamp-3 text-gray-700">{post.body}</p>
              <div className="mt-4 flex justify-content-between">
                <span className="text-sm text-gray-500">ID: {post.id}</span>
                <span className="text-sm text-gray-500">
                  User: {post.userId}
                </span>
              </div>
            </StyledCard>
          ))}
        </PostListContainer>
      )}
    </PageContainer>
  );
}
